name: Deploy to ECR

on: 
  push:
    branches: [ prod ]

jobs:
  build:
    name: Build and Push Images
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: us-east-1

    - name: Build, tag, and push my_db image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: clo835-assignment1
        IMAGE_TAG: latest
      run: |
        cd DockerCodes
        ls -ltra
        # Build my_db Docker image using the specified Dockerfile_mysql
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:my_db_$IMAGE_TAG -f Dockerfile_mysql .
        # Push the my_db Docker image to Amazon ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:my_db_$IMAGE_TAG

    - name: Build, tag, and push my_app image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: clo835-assignment1
        IMAGE_TAG: latest
      run: |
        cd DockerCodes
        ls -ltra
        # Build my_app Docker image using the specified Dockerfile
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:my_app_$IMAGE_TAG -f Dockerfile .
        # Push the my_app Docker image to Amazon ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:my_app_$IMAGE_TAG

    - name: Run and test 2-tier application
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: clo835-assignment1
        IMAGE_TAG: latest
        MYSQL_ROOT_PASSWORD: pw
        DBUSER: root
        DATABASE: employees
        DBPWD: pw
        APP_COLOR: blue
      run: |
        # Run the MySQL container
        docker run -d --name my_db_container -e MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD $ECR_REGISTRY/$ECR_REPOSITORY:my_db_$IMAGE_TAG
        echo "Pause for 10 seconds to let MySQL container start"
        sleep 10
        docker ps
        # Get the IP address of the MySQL container
        DBHOST=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' my_db_container)
        echo "The IP address of the my_db_container is $DBHOST"
        # Export environment variables for the application
        export DBHOST=$DBHOST
        export DBPORT=3306
        # Run the application container with the database connection details
        docker run -d -p 80:8080 --name my_app_container -e DBHOST=$DBHOST -e DBPORT=$DBPORT -e DBUSER=$DBUSER -e DBPWD=$DBPWD -e APP_COLOR=$APP_COLOR $ECR_REGISTRY/$ECR_REPOSITORY:my_app_$IMAGE_TAG
        echo "Pause for 10 seconds to let application container start"
        sleep 10
        docker ps
        docker logs my_app_container
        # Test the application container with detailed output
        curl localhost -vvv
